{
	"AoC.Day Template": {
		"prefix": "aocdaytemplate",
		"description": "Create a new day that implements AoC.Day",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"",
			"namespace AoC._${TM_DIRECTORY/^.+\\\\(.*)$/$1/}$0",
			"{",
			"    class $TM_FILENAME_BASE : Core.Day",
			"    {",
			"        public $TM_FILENAME_BASE() { }",
			"",
			"        public override string GetSolutionVersion(Core.Part part)",
			"        {",
			"            switch (part)",
			"            {",
			"                // case Core.Part.One:",
			"                //     return \"v1\";",
			"                // case Core.Part.Two:",
			"                //     return \"v1\";",
			"                default:",
			"                    return base.GetSolutionVersion(part);",
			"            }",
			"        }",
			"",
			"        protected override List<Core.TestDatum> GetTestData()",
			"        {",
			"            List<Core.TestDatum> testData = new List<Core.TestDatum>();",
			"            testData.Add(new Core.TestDatum",
			"            {",
			"                TestPart = Core.Part.One,",
			"                Output = \"\",",
			"                RawInput =",
			"@\"\"",
			"            });",
			"            testData.Add(new Core.TestDatum",
			"            {",
			"                TestPart = Core.Part.Two,",
			"                Output = \"\",",
			"                RawInput =",
			"@\"\"",
			"            });",
			"            return testData;",
			"        }",
			"",
			"        private string SharedSolution(List<string> inputs, Dictionary<string, string> variables)",
			"        {",
			"            return string.Empty;",
			"        }",
			"",
			"        protected override string RunPart1Solution(List<string> inputs, Dictionary<string, string> variables)",
			"            => SharedSolution(inputs, variables);",
			"",
			"        protected override string RunPart2Solution(List<string> inputs, Dictionary<string, string> variables)",
			"            => SharedSolution(inputs, variables);",
			"    }",
			"}"
		]
	}
}